# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.24)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS onvifinfo onvifcommon onvifdevice onvifdiscovery onvifreplay onvifrecording onvifreceiver onvifptz onvifmedia onvifmedia2 onvifimaging onvifevent onvifdisplay onvifanalytics)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target onvifinfo
add_executable(onvifinfo IMPORTED)

# Create imported target onvifcommon
add_library(onvifcommon SHARED IMPORTED)

set_target_properties(onvifcommon PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "WITH_SELF_PIPE"
  INTERFACE_COMPILE_FEATURES "cxx_strong_enums;cxx_auto_type;cxx_nullptr;cxx_long_long_type;cxx_explicit_conversions"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Qt5::Core;D:/vcpkg/installed/x64-windows/debug/lib/libssl.lib;D:/vcpkg/installed/x64-windows/debug/lib/libcrypto.lib"
)

# Create imported target onvifdevice
add_library(onvifdevice SHARED IMPORTED)

set_target_properties(onvifdevice PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifdiscovery
add_library(onvifdiscovery SHARED IMPORTED)

set_target_properties(onvifdiscovery PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifreplay
add_library(onvifreplay SHARED IMPORTED)

set_target_properties(onvifreplay PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifrecording
add_library(onvifrecording SHARED IMPORTED)

set_target_properties(onvifrecording PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifreceiver
add_library(onvifreceiver SHARED IMPORTED)

set_target_properties(onvifreceiver PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifptz
add_library(onvifptz SHARED IMPORTED)

set_target_properties(onvifptz PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifmedia
add_library(onvifmedia SHARED IMPORTED)

set_target_properties(onvifmedia PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifmedia2
add_library(onvifmedia2 SHARED IMPORTED)

set_target_properties(onvifmedia2 PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifimaging
add_library(onvifimaging SHARED IMPORTED)

set_target_properties(onvifimaging PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifevent
add_library(onvifevent SHARED IMPORTED)

set_target_properties(onvifevent PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifdisplay
add_library(onvifdisplay SHARED IMPORTED)

set_target_properties(onvifdisplay PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

# Create imported target onvifanalytics
add_library(onvifanalytics SHARED IMPORTED)

set_target_properties(onvifanalytics PROPERTIES
  INTERFACE_LINK_LIBRARIES "onvifcommon"
)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/libONVIFTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
